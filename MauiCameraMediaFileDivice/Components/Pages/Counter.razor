@page "/counter"

<MudContainer  Style="margin-top:20px;">
    <MudPaper Elevation="4" Class="pa-4">
        <MudText Typo="Typo.h4" Align="Align.Center">Foto y camara</MudText>

        <MudDivider Class="my-4"/>

      

        <MudDivider Class="my-4"/>

        <MudButton  Color="Color.Primary" OnClick="IncrementCount" Class="my-2">Pick Photo</MudButton>
        <MudButton  Color="Color.Secondary" OnClick="Cameraopen" Class="my-2">Capture Photo</MudButton>

        @if (!string.IsNullOrEmpty(currentCount) || !string.IsNullOrEmpty(currentC))
        {
            <MudDivider Class="my-4"/>

            @if (!string.IsNullOrEmpty(base64CurrentCountImage))
            {
                <MudDivider Class="my-4" />
                <div class="d-flex justify-center">
                <MudImage Src="@base64CurrentCountImage" Width="332" Height="250" Alt="Selected Image" Elevation="25" Class="rounded-lg ma-4" />
            </div>
            }

            @if (!string.IsNullOrEmpty(base64CurrentCImage))
            {
                <MudDivider Class="my-4" />
              <div class="d-flex justify-center">
                <MudImage Src="@base64CurrentCImage" Width="332" Height="250" Alt="Selected Image" Elevation="25" Class="rounded-lg ma-4" />
                </div>
            }
        }
    </MudPaper>
</MudContainer>

@code {
    private string currentCount = "";
    private string currentC = "";
    private string base64CurrentCountImage = "";
    private string base64CurrentCImage = "";
    private async void Cameraopen()
    {
        try
        {
            if (MediaPicker.Default.IsCaptureSupported)
            {
                FileResult myPhoto = await MediaPicker.Default.CapturePhotoAsync();
                if (myPhoto != null)
                {
                    string localFilePath = Path.Combine(FileSystem.CacheDirectory, myPhoto.FileName);
                    using Stream sourceStream = await myPhoto.OpenReadAsync();
                    using MemoryStream memoryStream = new MemoryStream();
                    await sourceStream.CopyToAsync(memoryStream);
                    byte[] imageBytes = memoryStream.ToArray();
                    base64CurrentCImage = $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";
                    currentC = "localFilePath";
                    StateHasChanged();
                    Console.WriteLine(localFilePath);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async void IncrementCount()
    {
        try
        {
            if (MediaPicker.Default.IsCaptureSupported)
            {
                FileResult myPhoto = await MediaPicker.Default.PickPhotoAsync();
                if (myPhoto != null)
                {
                    string localFilePath = Path.Combine(FileSystem.CacheDirectory, myPhoto.FileName);
                    using Stream sourceStream = await myPhoto.OpenReadAsync();
                    using MemoryStream memoryStream = new MemoryStream();
                    await sourceStream.CopyToAsync(memoryStream);
                    byte[] imageBytes = memoryStream.ToArray();
                    base64CurrentCImage = $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";
                    currentC = localFilePath;
                    StateHasChanged();
                    Console.WriteLine(localFilePath);
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
